function idx_match = find_matches(feat_dist)

[val, idx2] = min(feat_dist, [], 2);
idx1 = (1:length(idx2))';

% delete ambiguous matches
idx1_trim = [];
idx2_trim = [];

for i = 1:length(idx1)
    [r, c] = find(idx2==idx2(i));
    if length(r) == 1
        idx1_trim = [idx1_trim; idx1(i)];
        idx2_trim = [idx2_trim; idx2(i)];
    end
end

% delete unreliable matches
idx1_trim_2 = [];
idx2_trim_2 = [];

for i = 1:length(idx1_trim)
    u = feat_dist(idx1_trim(i), :);
    [val_min, idx_min] = min(u);
    u(idx_min) = max(u);
    [val_2min, ~] = min(u);
    
    if val_min / val_2min < 0.8
        idx1_trim_2 = [idx1_trim_2; idx1_trim(i)];
        idx2_trim_2 = [idx2_trim_2; idx2_trim(i)];
    end
end

idx1_final

num_match = length(idx1_trim_2);
idx_match = [idx1_trim_2(1:num_match), idx2_trim_2(1:num_match)];


% % increase order
% [val, idx2] = min(feat_dist, [], 2);
% idx1 = (1:length(idx2))';
% 
% % [~, order] = sort(val, 1);
% % idx1 = idx1(order);
% % idx2 = idx2(order);
% 
% % delete ambiguous matches
% idx1_trim = [];
% idx2_trim = [];
% 
% for i = 1:length(idx2)
%     [r, c] = find(idx2==idx2(i));
%     if length(r) == 1
%         idx1_trim = [idx1_trim; idx1(i)];
%         idx2_trim = [idx2_trim; idx2(i)];
%     end
% end
% 
% % delete unreliable matches
% idx1_trim_2 = [];
% idx2_trim_2 = [];
% 
% for i = 1:length(idx1_trim)
%     
%     
%     
% end
% 
% 
% % pick points with least distance
% num_match = length(idx1_trim);
% idx_match = [idx1_trim(1:num_match), idx2_trim(1:num_match)];
% % idx_match = [idx1, idx2];


